/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 02 01:32:34 GMT 2022
 */

package com.java.jacoco;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.java.jacoco.ASTtoDOT;
import com.java.jacoco.structure.MyASTNode;
import com.java.jacoco.structure.MyMethodNode;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTNode;
import org.eclipse.jdt.core.dom.ArrayInitializer;
import org.eclipse.jdt.core.dom.Block;
import org.eclipse.jdt.core.dom.BreakStatement;
import org.eclipse.jdt.core.dom.DoStatement;
import org.eclipse.jdt.core.dom.Expression;
import org.eclipse.jdt.core.dom.ExpressionStatement;
import org.eclipse.jdt.core.dom.ForStatement;
import org.eclipse.jdt.core.dom.IfStatement;
import org.eclipse.jdt.core.dom.Javadoc;
import org.eclipse.jdt.core.dom.MethodDeclaration;
import org.eclipse.jdt.core.dom.NullLiteral;
import org.eclipse.jdt.core.dom.NumberLiteral;
import org.eclipse.jdt.core.dom.ParenthesizedExpression;
import org.eclipse.jdt.core.dom.Statement;
import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
import org.eclipse.jdt.core.dom.VariableDeclarationStatement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ASTtoDOT_ESTest extends ASTtoDOT_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AST aST0 = new AST();
      VariableDeclarationFragment variableDeclarationFragment0 = aST0.newVariableDeclarationFragment();
      VariableDeclarationStatement variableDeclarationStatement0 = aST0.newVariableDeclarationStatement(variableDeclarationFragment0);
      variableDeclarationFragment0.delete();
      String string0 = ASTtoDOT.getUsedType(variableDeclarationStatement0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MyASTNode myASTNode0 = new MyASTNode();
      try { 
        ASTtoDOT.buildLabelFormate(myASTNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.java.jacoco.ASTtoDOT", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MyASTNode myASTNode0 = new MyASTNode();
      try { 
        ASTtoDOT.buildLabel(myASTNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.java.jacoco.ASTtoDOT", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AST aST0 = new AST();
      MethodDeclaration methodDeclaration0 = aST0.newMethodDeclaration();
      String string0 = ASTtoDOT.getUsedType(methodDeclaration0);
      assertEquals("MethodDeclaration", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AST aST0 = new AST();
      DoStatement doStatement0 = aST0.newDoStatement();
      Expression expression0 = doStatement0.getExpression();
      String string0 = ASTtoDOT.getUsedType(expression0);
      assertEquals("\u7B80\u5355\u540D", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MyASTNode myASTNode0 = new MyASTNode();
      AST aST0 = new AST();
      ForStatement forStatement0 = aST0.newForStatement();
      Statement statement0 = forStatement0.getBody();
      myASTNode0.astNode = (ASTNode) statement0;
      String string0 = ASTtoDOT.buildLabelFormate(myASTNode0);
      assertEquals("{ } //Block", string0);
  }



  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = ASTtoDOT.test(1);
      assertEquals("hello", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = ASTtoDOT.test(53);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AST aST0 = new AST();
      ParenthesizedExpression parenthesizedExpression0 = aST0.newParenthesizedExpression();
      ExpressionStatement expressionStatement0 = aST0.newExpressionStatement(parenthesizedExpression0);
      String string0 = ASTtoDOT.getUsedType(expressionStatement0);
      assertEquals("\u5706\u62EC\u53F7\u8868\u8FBE\u5F0F", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AST aST0 = new AST();
      ArrayInitializer arrayInitializer0 = aST0.newArrayInitializer();
      ExpressionStatement expressionStatement0 = aST0.newExpressionStatement(arrayInitializer0);
      String string0 = ASTtoDOT.getUsedType(expressionStatement0);
      assertEquals("ArrayInitializer", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AST aST0 = new AST();
      VariableDeclarationFragment variableDeclarationFragment0 = aST0.newVariableDeclarationFragment();
      VariableDeclarationStatement variableDeclarationStatement0 = aST0.newVariableDeclarationStatement(variableDeclarationFragment0);
      NumberLiteral numberLiteral0 = aST0.newNumberLiteral();
      variableDeclarationFragment0.setInitializer(numberLiteral0);
      String string0 = ASTtoDOT.getUsedType(variableDeclarationStatement0);
      assertEquals("\u521D\u59CB\u5316\u8D4B\u503C|NumberLiteral", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AST aST0 = new AST();
      VariableDeclarationFragment variableDeclarationFragment0 = aST0.newVariableDeclarationFragment();
      VariableDeclarationStatement variableDeclarationStatement0 = aST0.newVariableDeclarationStatement(variableDeclarationFragment0);
      NullLiteral nullLiteral0 = aST0.newNullLiteral();
      variableDeclarationFragment0.setInitializer(nullLiteral0);
      String string0 = ASTtoDOT.getUsedType(variableDeclarationStatement0);
      assertEquals("\u521D\u59CB\u5316\u8D4B\u503C|\u7A7A\u8D4B\u503C", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AST aST0 = new AST();
      VariableDeclarationFragment variableDeclarationFragment0 = aST0.newVariableDeclarationFragment();
      VariableDeclarationStatement variableDeclarationStatement0 = aST0.newVariableDeclarationStatement(variableDeclarationFragment0);
      // Undeclared exception!
      try { 
        ASTtoDOT.getUsedType(variableDeclarationStatement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.java.jacoco.ASTtoDOT", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AST aST0 = new AST();
      IfStatement ifStatement0 = aST0.newIfStatement();
      MyASTNode myASTNode0 = new MyASTNode();
      myASTNode0.astNode = (ASTNode) ifStatement0;
      String string0 = ASTtoDOT.buildLabelFormate(myASTNode0);
      assertEquals("MISSING//\u6761\u4EF6\u8BED\u53E5", string0);
  }





  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MyMethodNode myMethodNode0 = new MyMethodNode();
      AST aST0 = new AST();
      MethodDeclaration methodDeclaration0 = aST0.newMethodDeclaration();
      ArrayList<int[]> arrayList0 = new ArrayList<int[]>();
      myMethodNode0.mapping = (List<int[]>) arrayList0;
      myMethodNode0.methodNode = methodDeclaration0;
      Block block0 = aST0.newBlock();
      int[] intArray0 = new int[1];
      arrayList0.add(intArray0);
      methodDeclaration0.setBody(block0);
      try { 
        ASTtoDOT.ASTtoDotParser(myMethodNode0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.java.jacoco.ASTtoDOT", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MyMethodNode myMethodNode0 = new MyMethodNode();
      AST aST0 = new AST();
      MethodDeclaration methodDeclaration0 = aST0.newMethodDeclaration();
      LinkedList<MyASTNode> linkedList0 = new LinkedList<MyASTNode>();
      myMethodNode0.nodeList = (List<MyASTNode>) linkedList0;
      myMethodNode0.methodNode = methodDeclaration0;
      MyASTNode myASTNode0 = new MyASTNode();
      myASTNode0.label = "record";
      myASTNode0.astNode = (ASTNode) myMethodNode0.methodNode;
      linkedList0.add(myASTNode0);
      Block block0 = aST0.newBlock();
      methodDeclaration0.setBody(block0);
      try { 
        ASTtoDOT.ASTtoDotParser(myMethodNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.java.jacoco.util.GraphOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MyMethodNode myMethodNode0 = new MyMethodNode();
      AST aST0 = new AST();
      ArrayList<MyASTNode> arrayList0 = new ArrayList<MyASTNode>();
      myMethodNode0.nodeList = (List<MyASTNode>) arrayList0;
      MethodDeclaration methodDeclaration0 = aST0.newMethodDeclaration();
      LinkedList<MyASTNode> linkedList0 = new LinkedList<MyASTNode>();
      myMethodNode0.nodeList = (List<MyASTNode>) linkedList0;
      myMethodNode0.methodNode = methodDeclaration0;
      MyASTNode myASTNode0 = new MyASTNode();
      myASTNode0.astNode = (ASTNode) myMethodNode0.methodNode;
      linkedList0.add(myASTNode0);
      Block block0 = aST0.newBlock();
      methodDeclaration0.setBody(block0);
      try { 
        ASTtoDOT.ASTtoDotParser(myMethodNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.java.jacoco.util.GraphOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MyMethodNode myMethodNode0 = new MyMethodNode();
      AST aST0 = new AST();
      ArrayList<MyASTNode> arrayList0 = new ArrayList<MyASTNode>();
      myMethodNode0.nodeList = (List<MyASTNode>) arrayList0;
      MethodDeclaration methodDeclaration0 = aST0.newMethodDeclaration();
      LinkedList<MyASTNode> linkedList0 = new LinkedList<MyASTNode>();
      myMethodNode0.nodeList = (List<MyASTNode>) linkedList0;
      myMethodNode0.methodNode = methodDeclaration0;
      MyASTNode myASTNode0 = new MyASTNode();
      linkedList0.add(myASTNode0);
      Block block0 = aST0.newBlock();
      methodDeclaration0.setBody(block0);
      try { 
        ASTtoDOT.ASTtoDotParser(myMethodNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.java.jacoco.util.GraphOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MyMethodNode myMethodNode0 = new MyMethodNode();
      AST aST0 = new AST();
      MethodDeclaration methodDeclaration0 = aST0.newMethodDeclaration();
      myMethodNode0.methodNode = methodDeclaration0;
      Javadoc javadoc0 = aST0.newJavadoc();
      methodDeclaration0.setJavadoc(javadoc0);
      try { 
        ASTtoDOT.ASTtoDotParser(myMethodNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.java.jacoco.ASTtoDOT", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ASTtoDOT aSTtoDOT0 = new ASTtoDOT();
  }
}
